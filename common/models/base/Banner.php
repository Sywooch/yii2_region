<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use rico\yii2images\behaviors\ImageBehave;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\helpers\Html;
use yii\helpers\Json;

/**
 * This is the base-model class for table "banner".
 *
 * @property integer $id
 * @property string $name - Имя (заголовок) баннера
 * @property string $text - Текст баннера
 * @property resource $file - путь до файла картинки
 * @property string $options - JSON-опции
 * @property string $link
 * @property string $date_add - дата добавления записи
 * @property string $date_edit - дата обновления записи
 * @property integer $created_by - указатель на пользователя, добавившего запись
 * @property integer $updated_by - указатель на пользователя, обновившего запись
 * @property integer $lock
 * @property string $aliasModel
 * @property integer $count - порядок следования баннеров сортировка сверху-вниз
 */
abstract class Banner extends \yii\db\ActiveRecord
{

    const IMAGE_PATH = '/uploads/images/banners';
    const THUMB_PATH = 'thumb';
    const IMAGE_WIDTH = '750';
    const IMAGE_HEIGHT = '380';

    protected $imageFullPath;
    public $imageFiles;
    public $delImages;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'banner';
    }

    /**
     * @return array
     */
    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'date_add',
                'updatedAtAttribute' => 'date_edit',
                'value' => new \yii\db\Expression('NOW()'),
            ],
            'blameable' => [
                'class' => BlameableBehavior::className(),
                'createdByAttribute' => 'created_by',
                'updatedByAttribute' => 'updated_by',
            ],
            'image' => [
                'class' => ImageBehave::className(),
            ],
        ];
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['file', 'options', 'link'], 'string'],
            [['imageFiles'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg, gif', 'maxFiles' => 1],
            /*[['date_add', 'date_edit'], 'safe'],*/
            [[/*'created_by', 'updated_by',*/
                'count', 'lock'], 'integer'],
            [['name'], 'string', 'max' => 255],
            [['text'], 'string', 'max' => 100]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'name' => Yii::t('app', 'Name'),
            'text' => Yii::t('app', 'Text'),
            'file' => Yii::t('app', 'File'),
            'options' => Yii::t('app', 'Options'),
            'link' => Yii::t('app', 'Link'),
            'date_add' => Yii::t('app', 'Date Add'),
            'date_edit' => Yii::t('app', 'Date Edit'),
            'created_by' => Yii::t('app', 'Created By'),
            'updated_by' => Yii::t('app', 'Updated By'),
            'lock' => Yii::t('app', 'Lock'),
            'active' => Yii::t('app', 'Active'),
            'count' => Yii::t('app', 'Count'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'name' => Yii::t('app', 'Название баннера (заголовок)'),
            'text' => Yii::t('app', 'Подробный текст баннера'),
            'file' => Yii::t('app', 'Имя файла'),
            'options' => Yii::t('app', 'Опции (формат JSON)'),
            'link' => Yii::t('app', 'Ссылка на страницу при клике по баннеру'),
            'date_add' => Yii::t('app', 'Дата добавления записи'),
            'date_edit' => Yii::t('app', 'Дата изменения записи'),
            'created_by' => Yii::t('app', 'Кем создана запись (владелец записи)'),
            'updated_by' => Yii::t('app', 'Кем запись обновлена'),
            'active' => Yii::t('app', 'Признак активной записи'),
            'count' => Yii::t('app', 'Порядок следования баннеров'),
        ]);
    }


    /**
     * @inheritdoc
     * @return BannerQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\BannerQuery(get_called_class());
    }

    public function listAll()
    {
        return $this->find()->andWhere(['active' => 1]);
    }

    public function upload()
    {

        if ($this->validate()) {
            /*foreach($this->imageFiles as $file){*/
            //$image = new Image();
            //$image
            $file = $this->imageFiles;
            $this->imageFullPath = \Yii::$app->getBasePath() . "/web" . $this->file;
            if (!$file->saveAs($this->imageFullPath)) {
                $this->file = null;
            }
            //$this->saveImage();

            //$this->attachImage($this->imageFullPath);
            /*}*/
            return true;
        } else {
            return false;
        }
    }

    public function getImage2amigos($modelViews = false)
    {
        $items = array();
        $imageFiles = $this->getImages();
        foreach ($imageFiles as $image) {
            if ($modelViews) {
                $items[] = [
                    'url' => $image->getUrl(),
                    'src' => $image->getUrl('120px'),
                    'options' => ['title' => Yii::t('app', 'Photo hotels') . ' ' . $this->name],
                ];
            } else {
                $items[] = [
                    'url' => $image->getUrl(),
                    'src' => $image->getUrl('120px'),
                    'options' => ['title' => Yii::t('app', 'Photo hotels') . ' ' . $this->name],
                    'id' => $image->urlAlias,
                    'main' => $image->isMain,
                ];
            }

        }
        return $items;
    }

    static public function getImageOne($id)
    {
        $model = \common\models\Banner::findOne($id);
        $image = $model->getImage();
        return $image->getUrl('120x');
    }

    /**
     * Функция удаляет картинки по ее urlAlais
     * @param array $imageAlias
     * @return bool
     */
    public function imageDelete($imageAlias = array())
    {
        //Получаем отмеченные изображения

        try {
            if (is_array($imageAlias) && count($imageAlias) > 0) {

                foreach ($imageAlias as $idImage) {
                    $image = $this->getImageByField('urlAlias', $idImage);

                    $this->removeImage($image);

                }

                return true;
            } else {
                return false;
            }
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2])) ? $e->errorInfo[2] : $e->getMessage();
            $this->addError('_exception', $msg);
        }
    }

    private function resizeImage()
    {

    }

    public function getBanners()
    {
        $model = self::find()->andWhere(['active' => 1])->orderBy('count')->all();

        $banner = [
            'content' => $model->link ?
                Html::a(Html::img($model->file), $model->link) :
                Html::img($model->file),
            'caption' => $model->name,
            'options' => Json::encode($model->options)
        ];
        return $banner;
    }
    //
    /**
     *
     */
    public function saveImage()
    {

        $file = \Yii::$app->getBasePath() . "/web" . $this->file;

        $new_width = self::IMAGE_WIDTH;
        $new_height = self::IMAGE_HEIGHT;
        $this->imageResize($file, $file, $new_width, $new_height, 1);

    }

    /*public function getImage(){
        return true;
    }*/

    public function getThumb()
    {
        return true;
    }

    private function imageResize($src, $dst, $width, $height, $crop = 0)
    {

        if (!list($w, $h) = getimagesize($src)) $this->addError('imageFiles', Yii::t("Unsupported picture type!"));

        $type = strtolower(substr(strrchr($src, "."), 1));
        if ($type == 'jpeg') $type = 'jpg';
        switch ($type) {
            case 'bmp':
                $img = imagecreatefromwbmp($src);
                break;
            case 'gif':
                $img = imagecreatefromgif($src);
                break;
            case 'jpg':
                $img = imagecreatefromjpeg($src);
                break;
            case 'png':
                $img = imagecreatefrompng($src);
                break;
            default :
                return "Unsupported picture type!";
        }

        // resize
        if ($crop) {
            if ($w < $width or $h < $height) $this->addError('imageFiles', Yii::t("Picture is too small!"));
            $ratio = max($width / $w, $height / $h);
            $h = $height / $ratio;
            $x = ($w - $width / $ratio) / 2;
            $w = $width / $ratio;
        } else {
            if ($w < $width and $h < $height) $this->addError('imageFiles', Yii::t("Picture is too small!"));
            $ratio = min($width / $w, $height / $h);
            $width = $w * $ratio;
            $height = $h * $ratio;
            $x = 0;
        }

        $new = imagecreatetruecolor($width, $height);

        // preserve transparency
        if ($type == "gif" or $type == "png") {
            imagecolortransparent($new, imagecolorallocatealpha($new, 0, 0, 0, 127));
            imagealphablending($new, false);
            imagesavealpha($new, true);
        }

        imagecopyresampled($new, $img, 0, 0, $x, 0, $width, $height, $w, $h);

        switch ($type) {
            case 'bmp':
                imagewbmp($new, $dst);
                break;
            case 'gif':
                imagegif($new, $dst);
                break;
            case 'jpg':
                imagejpeg($new, $dst);
                break;
            case 'png':
                imagepng($new, $dst);
                break;
        }
        return true;
    }

    public static function bannerList()
    {
        $model = \common\models\Banner::find()
            ->andFilterWhere(['active' => 1])
            ->orderBy('count')
            ->all();
        return $model;
    }

}
