<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;

/**
 * This is the base-model class for table "tour_info".
 *
 * @property integer $id
 * @property string $name
 * @property string $date_end
 * @property integer $days
 * @property integer $active
 * @property integer $hotels_info_id
 * @property string $date_begin
 *
 * @property \common\models\SalBasket[] $salBaskets
 * @property \common\models\SalOrder[] $salOrders
 * @property \common\models\HotelsInfo $hotelsInfo
 * @property \common\models\TourInfoHasTourType[] $tourInfoHasTourTypes
 * @property \common\models\TourType[] $tourTypes
 * @property \common\models\TourInfoHasTourTypeTransport[] $tourInfoHasTourTypeTransports
 * @property \common\models\TourTypeTransport[] $tourTypeTransports
 * @property \common\models\TourPrice[] $tourPrices
 * @property string $aliasModel
 */
abstract class TourInfo extends \yii\db\ActiveRecord
{

    public $country;
    public $hotels_appartment_id;
    public $tour_type_id;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'tour_info';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    \yii\db\ActiveRecord::EVENT_BEFORE_INSERT => ['date_begin', 'date_end'],
                ],
                'value' => new \yii\db\Expression('NOW()'),
            ],
            [
                'class' => \common\components\behaviors\ManyHasManyBehavior::className(),
                'relations' => [
                    'tourTypes' => 'tourtype_list',
                    'tourTypeTransports' => 'tourtypetransport_list',
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['hotels_info_id'], 'required'],
            [['name'], 'string'],
            [['date_end', 'tourtype_list', 'tourtypetransport_list'], 'safe'],
            [['days', 'active', 'hotels_info_id', 'country','hotels_appartment_id'], 'integer'],
            [['tour_type_id'], 'integer'],
            ['date_begin', 'compare', 'compareAttribute' => 'date_end', 'operator' => '<='],
            [['hotels_info_id'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\HotelsInfo::className(), 'targetAttribute' => ['hotels_info_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [

            'name' => Yii::t('app', 'Name'),
            'date_begin' => Yii::t('app', 'Date Begin'),
            'date_end' => Yii::t('app', 'Date End'),
            'days' => Yii::t('app', 'Количество дней тура'),
            'active' => Yii::t('app', 'Признак активности тура'),
            'hotels_info_id' => Yii::t('app', 'Hotels Info ID'),
            'tourtype_list' => Yii::t('app', 'Tourtype List'),
            'tourtypetransport_list' => Yii::t('app', 'Tourtypetransport List'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSalBaskets()
    {
        return $this->hasMany(\common\models\SalBasket::className(), ['tour_info_id' => 'id'])->inverseOf('tourInfo');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSalOrders()
    {
        return $this->hasMany(\common\models\SalOrder::className(), ['tour_info_id' => 'id'])->inverseOf('tourInfo');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getHotelsInfo()
    {
        return $this->hasOne(\common\models\HotelsInfo::className(), ['id' => 'hotels_info_id'])->inverseOf('tourInfos');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTourInfoHasTourTypes()
    {
        return $this->hasMany(\common\models\TourInfoHasTourType::className(), ['tour_info_id' => 'id'])->inverseOf('tourInfo');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTourTypes()
    {
        return $this->hasMany(\common\models\TourType::className(), ['id' => 'tour_type_id'])->viaTable('tour_info_has_tour_type', ['tour_info_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTourInfoHasTourTypeTransports()
    {
        return $this->hasMany(\common\models\TourInfoHasTourTypeTransport::className(), ['tour_info_id' => 'id'])->inverseOf('tourInfo');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTourTypeTransports()
    {
        return $this->hasMany(\common\models\TourTypeTransport::className(), ['id' => 'tour_type_transport_id'])->viaTable('tour_info_has_tour_type_transport', ['tour_info_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTourPrices()
    {
        return $this->hasMany(\common\models\TourPrice::className(), ['tour_info_id' => 'id'])->inverseOf('tourInfo');
    }


    
    /**
     * @inheritdoc
     * @return TourInfoQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\TourInfoQuery(get_called_class());
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCountry()
    {
        $model = $this->getHotelsInfo();
        if ($model->one() != null) {
            $this->country = $model->one()->country;
            return \common\models\Country::findOne(['id' => $this->country]);
        } else {
            return false;
        }
    }

    public function getHotelsByCountry($idCountry)
    {
        $model = new \common\models\HotelsInfo();
        //$model->find()->andFilterWhere(['country'=>$idCountry]);
        return $model->findAll(['country' => $idCountry,'active'=>1]);
    }

    public function getAppertmentsByHotel($idHotel)
    {
        $model = new \common\models\HotelsAppartment();
        //$model->find()->andFilterWhere(['country'=>$idCountry]);
        return $model->findAll(['hotels_info_id' => $idHotel]);
    }

}
